			.include "m8def.inc"	; Используем ATMega8
			.include "macro.asm"	; Все макросы у нас тут
			.include "LCD_macro_sps.inc"	; Макросы общения с LCD

; RAM =====================================================
			.DSEG					; Оперативка 

; FLASH ===================================================
			.CSEG

			.include "vectors.asm"	; Все вектора прерываний спрятаны в этом файле
			.ORG	INT_VECTORS_SIZE

			
			.include "ints.asm"


Reset:		ldi r16, high(RAMEND); Main program start
 			out  SPH,r16 ; Set Stack Pointer to top of RAM
 			ldi r16,  low(RAMEND)
 			out SPL,r16
			
			.include "initial.asm"			; Все инициализации тут.

			sei ; Enable interrupts

	    //	OUTU '+'

//////////////////////////////////////////////////////////////////////////////
////////////                    НАЧАЛО ПРОГРАММЫ                 /////////////
//////////////////////////////////////////////////////////////////////////////
INIT_LCD
/////////////////////////////////////////////////////////////////////
// ПРИВЕТСТВИЕ

CLEAR

	//==== первая строка =====

	PRINT	0x53	;[S]
	PRINT	0x50	;[P]
	PRINT	0x53	;[S]
	PRINT	0x3A	;[:]
	PRINT	0x54	;[T]
	PRINT	0x45	;[E]
	PRINT	0x43	;[C]
	PRINT	0x48	;[H]

//==== вторая строка =====

	RETURN	; На следующую строку

	PRINT	0x3C	;[<]
	PRINT	0xC8	;[<<]
	PRINT	0x32	;[2]
	PRINT	0x30	;[0]
	PRINT	0x31	;[1]
	PRINT	0x35	;[5]
	PRINT	0xC9	;[>>]
	PRINT	0x3E	;[>]

	DDLOOP 100,255,255
/////////////////////////////////////////////////////////////////////
// РАБОЧИЙ ЭКРАН

CLEAR

//==== первая строка =====

	PRINT	0x2D	;[-]
	PRINT	0x20	;[]
	PRINT	0x43	;[С]
	PRINT	0xAB	;[Ч]
	PRINT	0x45	;[E]
	PRINT	0x54	;[Т]
	PRINT	0x20	;[]
	PRINT	0x2D	;[-]


//==== вторая строка =====

	RETURN	; На следующую строку

	PRINT	0x20	;[]
	PRINT	0x20	;[]
	PRINT	0x5F	;[_]
	PRINT	0x5F	;[_]
	PRINT	0x5F	;[_]
	PRINT	0x20	;[]
	PRINT	0x20	;[]
	PRINT	0x20	;[]

/////////////////////////////////////////////////////////////////////
	
	CLR		cBUF

while1:

	SETB	PORTC,3,R16	; вход [1]

	DDLOOP 1,255,255

	CLRB	PORTC,3,R16	; вход [0]

wait:
	
	NOP

	SBIC	PINC,2
	RJMP	cont
	RJMP	wait

cont:

	CLR	cBUF

	LDI	R16,(1<<CS01)	;
	OUT	TCCR0, R16		; Инициализация таймера

incrm:
	
	SBIS	PINC,2
	RJMP	outd
	RJMP	incrm

outd:

	LDI	R16,(0<<CS01)	;
	OUT	TCCR0, R16		; Инициализация таймера

	RCALL 	OUT_CIK		; вывод значений переменной

	DDLOOP 3,255,255


RJMP while1

//////////////////////////////////////////////////////////////////////////////
////////////                	ВЫВОД ПЕРЕМЕННОЙ   	   	         /////////////
//////////////////////////////////////////////////////////////////////////////
OUT_CIK:

	RCALL	CONV

	RETURN	; На следующую строку

	PRINT	0x20	;[]
	PRINT	0x20	;[]
	PRINT	0x20	;[]
	WR_DT_REG	Ra2
	WR_DT_REG	Ra3

RET
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
////////////            	ИНТЕРПРЕТАТОР ЗНАЧЕНИЙ 	   	         /////////////
//////////////////////////////////////////////////////////////////////////////
CONV:
	CLR		COUNT
	CLR		Ra1
	CLR		Ra2
	CLR		Ra3

sch:

	CP		COUNT,cBUF
	BREQ	exits

	INC		COUNT

//--------------------------

	INC		Ra3
	CPI		Ra3,10
	BRNE	sch
	CLR		Ra3

//--------------------------

	INC		Ra2
	CPI		Ra2,10
	BRNE	sch
	CLR		Ra2

//--------------------------

	INC		Ra1
	CPI		Ra1,10
	BRNE	sch
	CLR		Ra1

//--------------------------

	RJMP	sch

exits:		; смещение по таблице символов LCD

	LDI	R16,48
	ADD	Ra1,R16
	ADD	Ra2,R16
	ADD	Ra3,R16

RET
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
////////////               	      БИБЛИОТЕКИ                     /////////////
//////////////////////////////////////////////////////////////////////////////

	.include "VPort.asm"	 ; библиотека виртуального порта
	.include "LCD_sps.asm"	; библиотека LCD

	
; EEPROM ==================================================
		.ESEG			; Сегмент EEPROM  
